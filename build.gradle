buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath group: 'biz.aQute.bnd', name: 'biz.aQute.bnd.gradle', version: '5.0.1'
  }
}

plugins {
  id "java"
}

apply plugin: 'biz.aQute.bnd.builder'

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://maven.restlet.com" }
  maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

java {
  registerFeature('docbook') {
    usingSourceSet(sourceSets.main)
  }
}

configurations.all {
  resolutionStrategy {
    force 'xml-apis:xml-apis:1.4.01'
    force "org.xmlresolver:xmlresolver:${xmlresolverVersion}"
  }
}

configurations {
  docbookImplementation {
    canBeResolved = true
  }
  standaloneClasspath.extendsFrom(testImplementation)
}

dependencies {
  implementation (
    [group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'],
    [group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.13'],
    [group: 'net.java.dev.msv', name: 'msv-core', version: '2013.6.1'],
    [group: 'org.xmlresolver', name: 'xmlresolver', version: xmlresolverVersion],
    [group: 'org.xmlresolver', name: 'xmlresolver', version: xmlresolverVersion,
     classifier: 'data'],
    [group: 'org.xmlresolver', name: 'xmlresolver', version: xmlresolverVersion,
     classifier: 'apps'],
    [group: 'xml-apis', name: 'xml-apis', version: '1.4.01' ],
    [group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30' ],
    [group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30' ],
    [group: 'net.sf.saxon', name: 'Saxon-HE', version: '10.5'],
    [group: 'org.relaxng', name: 'jing', version: '20181222' ]
  )

  docbookImplementation (
    [group: 'org.docbook', name: 'schemas-docbook', version: '5.2b10a4'],
    [group: 'org.docbook', name: 'docbook-xslTNG', version: '1.5.0']
  )
}

task setupDist() {
  FileCollection runtime  = configurations.standaloneClasspath
  String path = ""
  runtime.each {
    File file -> path += " lib/" + file.name
  }
  project.ext.runtimeClasspath = path.trim()

  // HACK!
  configurations.docbookImplementation.resolve().each { dbpath ->
    if (dbpath.name.contains('docbook-xslTNG')
        || dbpath.name.contains('schemas-docbook')) {
      doLast {
        copy {
          into { "${buildDir}/dist/docbook" }
          from dbpath
        }
      }
    }
  }

  doLast {
    copy {
      into { "${buildDir}/dist/lib" }
      from runtime
    }
  }

  doLast {
    copy {
      into { "${buildDir}/dist/xml" }
      from "xml"
    }
  }

  doLast {
    copy {
      into { "${buildDir}/dist/schema" }
      from "schema"
    }
  }

  doLast {
    copy {
      into { "${buildDir}/dist" }
      from ("${buildDir}/libs") {
        include "xmlresolver-sampleapp-${relVersion}.jar"
      }
    }
  }
}

jar {
  archiveBaseName = "sampleapp-${relVersion}"
  bnd ('Bundle-Vendor': 'Norman Walsh',
       'Bundle-Description': 'XML Resolver example application.',
       'Class-Path': "${project.ext.runtimeClasspath} lib",
       'Implementation-Title': 'XML Resolver sample application',
       'Implementation-Version': relVersion,
       'Main-Class': 'org.xmlresolver.example.SampleApp'
  )
}
jar.dependsOn setupDist

// Initially, I simply had the copyJar task copy the built jar
// into the build/dist directory. But on the CI instance, this
// always resulted in the files already in build/dist being
// deleted. I couldn't reliably reproduce that on a Mac or
// Linux, though I did think it happened once on my Linux test
// rig. I'm punting and doing this instead, which seems to work.
task copyJar(dependsOn: ["jar", "setupDist"]) {
  doLast {
    copy {
      into "${buildDir}/stage"
      from ("${buildDir}/dist") {
        exclude "lib/xmlresolver-${xmlresolverVersion}-apps.jar"
      }
    }
  }

  doLast {
    copy {
      into "${buildDir}/stage"
      from ("${buildDir}/dist/lib") {
        include "xmlresolver-${xmlresolverVersion}-apps.jar"
      }
    }
  }

  doLast {
    copy {
      into "${buildDir}/stage"
      from "${buildDir}/libs"
    }
  }
}

task dist(dependsOn: ["copyJar", "setupDist"], type: Zip) {
  from "${buildDir}/stage"
  into 'xmlresolver-sampleapp-' + relVersion
  archiveFileName = "xmlresolver-sampleapp-${relVersion}.zip"
}

// ======================================================================

task helloWorld() {
  // My task for testing
  doLast {
    println("Hello, world.")
    configurations.standaloneClasspath.each { jar ->
      println("Classpath: ${jar}")
    }
  }
}
